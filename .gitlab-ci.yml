cache:
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
  paths:
    - .composer/
    - .php_cs.cache

variables:
  COMPOSER_CACHE_DIR: ".composer"
  TYPO3_PATH_WEB: "$CI_PROJECT_DIR/.build/public"
  MYSQL_DATABASE: "typo3"
  MYSQL_ROOT_PASSWORD: "joh316"
  typo3DatabaseName: "typo3"
  typo3DatabaseHost: "mysql"
  typo3DatabaseUsername: "root"
  typo3DatabasePassword: "joh316"

before_script:
  - apk add git --update

stages:
  - lint
  - test
  - documentation
  - analysis

lint:cgl:
  image: $CI_REGISTRY/containers/phpunit-with-php-8.2:main
  stage: lint
  before_script:
    - composer remove typo3/cms-core --no-update
    - composer config --no-plugins allow-plugins.sbuerk/typo3-cmscomposerinstallers-testingframework-bridge true
    - composer install --no-progress --no-ansi --no-interaction
  script:
    - .build/bin/php-cs-fixer fix --config=Build/.php-cs-fixer.dist.php -v --dry-run --using-cache=no --path-mode=intersection ./

#lint:typoscriptcgl:
#  stage: lint
#  image: composer:2
#  script:
#    - composer config platform.php 7.1
#    - composer remove typo3/cms-core --no-update
#    - composer install --no-progress --no-ansi --no-interaction
#    - .build/bin/typoscript-lint -c Build/typoscriptlint.yaml Configuration

lint:yaml:
  stage: lint
  image: python:alpine3.7
  before_script:
    - pip install yamllint==1.10.0
  script:
    - yamllint -c Build/yamllint.yaml Configuration/ Resources/

.lint_php: &lint_php
  stage: lint
  image: $CONTAINER_IMAGE
  script:
    - find *.php Classes Configuration Tests

lint:php82:
  <<: *lint_php
  variables:
    CONTAINER_IMAGE: php:8.2-alpine

lint:php83:
  <<: *lint_php
  variables:
    CONTAINER_IMAGE: php:8.3-alpine

phpstan:analyse:
  image: $CI_REGISTRY/containers/phpunit-with-php-8.2:main
  stage: lint
  before_script:
    - composer config platform.php 8.2
    - composer remove --dev ssch/typo3-rector
    - composer require typo3/cms-install "*"
    - composer install --no-progress --no-ansi --no-interaction
  script:
    - .build/bin/phpstan analyse -c Build/phpstan.neon --memory-limit 256M

.test: &test_php
  stage: test
  services:
  - mysql:5
  image: $CONTAINER_IMAGE
  only:
    - branches
  before_script:
    - composer config --no-plugins allow-plugins.typo3/cms-composer-installers true
    - composer config --no-plugins allow-plugins.typo3/class-alias-loader true
    - composer config --no-plugins allow-plugins.sbuerk/typo3-cmscomposerinstallers-testingframework-bridge true
    - composer require typo3/cms-core="${TYPO3_VERSION}"
    - composer require typo3/cms-form="${TYPO3_VERSION}"
    - composer require --dev typo3/cms-dashboard="${TYPO3_VERSION}"
  script:
    - >
      if [[ "$COVERAGE" == "0" ]]; then
        .build/bin/phpunit -c Build/UnitTests.xml
      fi
    - >
      if [[ "$COVERAGE" == "1" ]]; then
        XDEBUG_MODE=coverage .build/bin/phpunit --coverage-clover=phpunit.coverage.xml --log-junit=phpunit.report.xml -c Build/UnitTests.xml
      fi
    - typo3DatabaseDriver=pdo_sqlite .build/bin/phpunit -c Build/FunctionalTests.xml
  artifacts:
    paths:
      - phpunit.coverage.xml
      - phpunit.report.xml
    expire_in: 1 day
    when: always

# Build in PHP 8.2 and TYPO3 13.3
test:php82:typo3_13:
  <<: *test_php
  variables:
    CONTAINER_IMAGE: $CI_REGISTRY/containers/phpunit-with-php-8.2:main
    TYPO3_VERSION: ^13.3
    COVERAGE: 0

# Build in PHP 8.3 and TYPO3 13.2
test:php83:typo3_13:
  <<: *test_php
  variables:
    CONTAINER_IMAGE: $CI_REGISTRY/containers/phpunit-with-php-8.3:main
    TYPO3_VERSION: ^13.3
    COVERAGE: 1

documentation:
  stage: documentation
  image:
    name: ghcr.io/typo3-documentation/render-guides:latest
    entrypoint: [ "" ]
  script:
    - mkdir -p Documentation-GENERATED-temp
    - /opt/guides/entrypoint.sh --config=Documentation --no-progress --fail-on-log
  before_script: []
  artifacts:
    paths:
      - Documentation-GENERATED-temp/
    expire_in: 1 day
    when: always

sonarqube:
  stage: analysis
  image: ciricihq/gitlab-sonar-scanner
  variables:
    SONAR_URL: "https://sonar.extco.de"
    SONAR_PROJECT_NAME: "$CI_PROJECT_NAME"
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_PROJECT_VERSION: "$CI_JOB_ID"
    SONAR_ANALYSIS_MODE: "issues"
    SONAR_SOURCES: "./Classes"
    SONAR_GITLAB_PROJECT_ID: "$CI_PROJECT_ID"
  script:
    - echo "sonar.projectKey=cart-10.x" > sonar-project.properties
    - gitlab-sonar-scanner -Dsonar.php.coverage.reportPath=phpunit.coverage.xml -Dsonar.php.tests.reportPath=phpunit.report.xml
  allow_failure: true

sonarqube-reports:
  stage: analysis
  image: ciricihq/gitlab-sonar-scanner
  variables:
    SONAR_URL: "https://sonar.extco.de"
    SONAR_PROJECT_NAME: "$CI_PROJECT_NAME"
    SONAR_TOKEN: "$SONAR_TOKEN"
    SONAR_PROJECT_VERSION: "$CI_JOB_ID"
    SONAR_ANALYSIS_MODE: "publish"
    SONAR_SOURCES: "./Classes"
    SONAR_TESTS: "./Tests"
  script:
    - echo "sonar.projectKey=cart-10.x" > sonar-project.properties
    - gitlab-sonar-scanner -Dsonar.php.coverage.reportPath=phpunit.coverage.xml -Dsonar.php.tests.reportPath=phpunit.report.xml
