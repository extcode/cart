plugin.tx_cart {
    view {
        templateRootPath = EXT:cart/Resources/Private/Templates/
        partialRootPath = EXT:cart/Resources/Private/Partials/
        layoutRootPath = EXT:cart/Resources/Private/Layouts/
    }

    persistence {
        storagePid =
    }

    # cat=plugin.cart//0070; type=text; label= Service Attribute 1 symbol (e.g. Weight: g, kg, lbs).
    main.service_attribute_1_symbol =

    # cat=plugin.cart//0071; type=text; label= Service Attribute 2 symbol (e.g. Volume: l, gal).
    main.service_attribute_2_symbol =

    # cat=plugin.cart//0072; type=text; label= Service Attribute 3 symbol (e.g. Length: m, cm, inch).
    main.service_attribute_3_symbol =

    # cat=plugin.cart//0090; type=text; label= Enter the uid of the page where cart plugin resides (e.g. 10).
    main.pid =

    gpValues {
        # cat=plugin.cart//0100; type=text; label= Param productId: Enter the correct parameter name for a unique product number (integer) of your order form. cart uses this number for internal purposes. It can't be a string. The PUID will never be displayed (e.g. tx_myext_pi1|showUid). Default: productId.
        productId = productId

        # cat=plugin.cart//0101; type=text; label= Param productStorageId: Enter the correct parameter name for a unique product storage (integer) of your order form. cart uses this number for internal purposes. It can't be a string. The productStorageId will never be displayed.
        productStorageId =

        # cat=plugin.cart//0105; type=text; label= Param contentId: Enter the correct parameter name for the uid of the current tt_content element. This value is only needed if you want to add tt_content elements to your cart. The provided parameter must be equal to the name in your HTML template. Default: contentId.
        contentId = contentId

        # cat=plugin.cart//0110; type=text; label= Param Quantity: Enter the correct parameter name for the quantity/amount field of your order form. The provided parameter must be equal to the name in your HTML template. Default: quantity.
        quantity = quantity

        beVariants {
            # cat=plugin.cart//0150; type=text; label= Param Variants: Enter the correct parameter name for the variant 1.
            1 =
            # cat=plugin.cart//0151; type=text; label= Param Variants: Enter the correct parameter name for the variant 2.
            2 =
            # cat=plugin.cart//0152; type=text; label= Param Variants: Enter the correct parameter name for the variant 3.
            3 =
        }

        # cat=plugin.cart//0153; type=text; label= Param Multiple: Enter the correct parameter name if adding multiple products to cart in one form.
        multiple = multiple
    }

    productStorages {
        1 {
            class = Extcode\Cart\Domain\Repository\Product\ProductRepository
        }
    }

    taxClasses {
        1 {
            # cat=plugin.cart//0160; type=text; label= Tax rate: Enter the tax value for this tax class item (e.g. 19). Value will be displayed.
            value = 19
            # cat=plugin.cart//0161; type=text; label= Tax rate: Enter the tax rate for this tax class item (e.g. 0.19). Used for calculation.
            calc = 0.19
            # cat=plugin.cart//0162; type=text; label= Tax rate: Enter the name for this tax class item (e.g. normal). Value can be displayed.
            name = normal
        }

        2 {
            # cat=plugin.cart//0170; type=text; label= Tax rate: Enter the tax value for this tax class item (e.g. 7). Value will be displayed.
            value = 7
            # cat=plugin.cart//0171; type=text; label= Tax rate: Enter the tax rate for this tax class item (e.g. 0.07). Used for calculation.
            calc = 0.07
            # cat=plugin.cart//0172; type=text; label= Tax rate: Enter the name for this tax class item (e.g. reduced). Value can be displayed.
            name = reduced
        }

        3 {
            # cat=plugin.cart//0180; type=text; label= Tax rate: Enter the tax value for this tax class item (e.g. 0). Value will be displayed.
            value = 0
            # cat=plugin.cart//0181; type=text; label= Tax rate: Enter the tax rate for this tax class item (e.g. 0.19). Used for calculation.
            calc = 0.00
            # cat=plugin.cart//0182; type=text; label= Tax rate: Enter the name for this tax class item (e.g. free). Value can be displayed.
            name = free
        }
    }

    orderNumber {
        # cat=plugin.cart//0600; type=text; label= Prefix (prepend) for order confirmation number (e.g. DE).
        prefix =
        # cat=plugin.cart//0610; type=text; label= Suffix (append) for order confirmation number (e.g. O).
        suffix =
        # cat=plugin.cart//0620; type=int+; label= Offset for order confirmation number: The offset is added to the order confirmation number (e.g. if the offset is 999 the first order confirmation number will be 1000).
        offset =
    }

    invoiceNumber {
        # cat=plugin.cart//0630; type=text; label= Prefix (prepend) for invoice number (e.g. DE).
        prefix =
        # cat=plugin.cart//0640; type=text; label= Suffix (append) for invoice number (e.g. I).
        suffix =
        # cat=plugin.cart//0650; type=int+; label= Offset for invoice number: The offset is added to the invoice number (e.g. if the offset is 999 the first invoice number will be 1000).
        offset =
    }

    deliveryNumber {
        # cat=plugin.cart//0660; type=text; label= Prefix (prepend) for delivery note number (e.g. DE).
        prefix =
        # cat=plugin.cart//0670; type=text; label= Suffix (append) for delivery note number (e.g. I).
        suffix =
        # cat=plugin.cart//0680; type=int+; label= Offset for delivery note number: The offset is added to the delivery note number (e.g. if the offset is 999 the first delivery note number will be 1000).
        offset =
    }

    validation {
        orderItem {
            fields {
                acceptTerms.validator = Boolean
                acceptTerms.options.is = true
                acceptConditions.validator = Boolean
                acceptConditions.options.is = true
            }
        }
        billingAddress {
            fields {
                salutation.validator = NotEmpty
                firstName.validator = NotEmpty
                lastName.validator = NotEmpty
                email.validator = NotEmpty
                street.validator = NotEmpty
                zip.validator = NotEmpty
                city.validator = NotEmpty
            }
        }
        shippingAddress {
            fields {
                salutation.validator = NotEmpty
                firstName.validator = NotEmpty
                lastName.validator = NotEmpty
                email.validator = NotEmpty
                street.validator = NotEmpty
                zip.validator = NotEmpty
                city.validator = NotEmpty
            }
        }
    }
}
