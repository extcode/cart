ajaxCart = PAGE
ajaxCart {
    typeNum = 2278001

    config {
        disableAllHeaderCode = 1
        xhtml_cleaning = 0
        admPanel = 0
        debug = 0
        no_cache = 1
    }

    10 < tt_content.list.20.cart_cart
}

ajaxProduct = PAGE
ajaxProduct {
    typeNum = 2278002

    config {
        disableAllHeaderCode = 1
        xhtml_cleaning = 0
        admPanel = 0
        debug = 0
        no_cache = 1
    }

    10 < tt_content.list.20.cart_product
}

config.tx_extbase {
    persistence {
        classes {
            Extcode\Cart\Domain\Model\Category {
                mapping {
                    tableName = sys_category
                    recordType =
                }
            }
        }
    }
}

plugin.tx_cart {
    persistence {
        classes {
            Extcode\Cart\Domain\Model\Category {
                mapping {
                    tableName = sys_category
                }
            }
        }
    }
}

page.includeCSS.tx_cart = EXT:cart/Resources/Public/Stylesheets/cart.css
page.includeJSFooter.tx_cart = EXT:cart/Resources/Public/JavaScripts/cart.js

plugin.tx_cart {

    view {
        templateRootPaths {
            0 = {$plugin.tx_cart.view.templateRootPath}
        }
        partialRootPaths {
            0 = {$plugin.tx_cart.view.partialRootPath}
        }
        layoutRootPaths {
            0 = {$plugin.tx_cart.view.layoutRootPath}
        }
    }

    persistence {
        storagePid = {$plugin.tx_cart.persistence.storagePid}
    }

    mvc {
        callDefaultActionIfActionCantBeResolved = 1
    }
    features {
        skipDefaultArguments = 1
    }

    settings {
        cart {
            pid = {$plugin.tx_cart.settings.cart.pid}
            isNetCart = {$plugin.tx_cart.settings.cart.isNetCart}
        }

        order {
            pid = {$plugin.tx_cart.settings.order.pid}
        }

        format.currency {
            currencySign       = {$plugin.tx_cart.settings.format.currency.currencySign}
            decimalSeparator   = {$plugin.tx_cart.settings.format.currency.decimalSeparator}
            thousandsSeparator = {$plugin.tx_cart.settings.format.currency.thousandsSeparator}
            prependCurrency    = {$plugin.tx_cart.settings.format.currency.prependCurrency}
            separateCurrency   = {$plugin.tx_cart.settings.format.currency.separateCurrency}
            decimals           = {$plugin.tx_cart.settings.format.currency.decimals}
        }

        allowedCountries {
            de = Deutschland
            at = Ã–sterreich
            ch = Schweiz
        }
        defaultCountry = de

        showAction {
            media {
                image {
                    size {
                        small.maxWidth = 100
                        small.maxHeight =
                        medium.maxWidth = 300
                        medium.maxHeight =
                        large.maxWidth = 600
                        large.maxHeight =
                    }
                }
            }
        }
        teaserAction < .showAction
        listAction < .showAction

        showCartAction {
            validation {
                fields {
                    acceptTerms = {$plugin.tx_cart.validation.orderItem.fields.acceptTerms.options.is}
                    acceptConditions = {$plugin.tx_cart.validation.orderItem.fields.acceptConditions.options.is}
                }
            }
            summary {
                fields {
                    cart.net = true
                    cart.taxes = true
                    discount.gross = true
                    service.gross = true
                    total.gross = true
                }
            }
        }
    }

    validation {
        orderCartAction {
            orderItem {
                fields {
                    acceptTerms {
                        validator = {$plugin.tx_cart.validation.orderItem.fields.acceptTerms.validator}
                        options.is = {$plugin.tx_cart.validation.orderItem.fields.acceptTerms.options.is}
                    }
                    acceptConditions {
                        validator = {$plugin.tx_cart.validation.orderItem.fields.acceptConditions.validator}
                        options.is = {$plugin.tx_cart.validation.orderItem.fields.acceptConditions.options.is}
                    }
                }
            }
            billingAddress {
                fields {
                    salutation {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.salutation.validator}
                    }
                    firstName {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.firstName.validator}
                    }
                    lastName {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.lastName.validator}
                    }
                    email {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.email.validator}
                    }
                    street {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.street.validator}
                    }
                    zip {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.zip.validator}
                    }
                    city {
                        validator = {$plugin.tx_cart.validation.billingAddress.fields.city.validator}
                    }
                }
            }
            shippingAddress {
                fields {
                    salutation {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.salutation.validator}
                    }
                    firstName {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.firstName.validator}
                    }
                    lastName {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.lastName.validator}
                    }
                    email {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.email.validator}
                    }
                    street {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.street.validator}
                    }
                    zip {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.zip.validator}
                    }
                    city {
                        validator = {$plugin.tx_cart.validation.shippingAddress.fields.city.validator}
                    }
                }
            }
        }
    }

    gpValues {
        productId        = {$plugin.tx_cart.gpValues.productId}
        productStorageId = {$plugin.tx_cart.gpValues.productStorageId}

        contentId        = {$plugin.tx_cart.gpValues.contentId}

        quantity         = {$plugin.tx_cart.gpValues.quantity}

        beVariants.1     = {$plugin.tx_cart.gpValues.beVariants.1}
        beVariants.2     = {$plugin.tx_cart.gpValues.beVariants.2}
        beVariants.3     = {$plugin.tx_cart.gpValues.beVariants.3}

        multiple         = {$plugin.tx_cart.gpValues.multiple}

        beVariants {
            1 = beVariants|1
        }
    }

    productStorages {
        1 {
            class = {$plugin.tx_cart.productStorages.1.class}
        }
    }

    taxClasses {
        1 {
            value = {$plugin.tx_cart.taxClasses.1.value}
            calc = {$plugin.tx_cart.taxClasses.1.calc}
            name = {$plugin.tx_cart.taxClasses.1.name}
        }
        2 {
            value = {$plugin.tx_cart.taxClasses.2.value}
            calc = {$plugin.tx_cart.taxClasses.2.calc}
            name = {$plugin.tx_cart.taxClasses.2.name}
        }
        3 {
            value = {$plugin.tx_cart.taxClasses.3.value}
            calc = {$plugin.tx_cart.taxClasses.3.calc}
            name = {$plugin.tx_cart.taxClasses.3.name}
        }
    }

    shippings {
        de {
            preset = 1
            options {
                1 {
                    title = Standard
                    extra = 0.00
                    taxClassId = 1
                    status = open
                }
            }
        }
        at < .de
        ch < .de
    }

    payments {
        de {
            preset = 1
            options {
                1 {
                    title = Vorkasse
                    extra = 0.00
                    taxClassId = 1
                    status = open
                }
            }
        }
        at < .de
        ch < .de
    }

    orderNumber = COA
    orderNumber {
        10 = TEXT
        10.value = {$plugin.tx_cart.orderNumber.prefix}

        20 = TEXT
        20.current = 1
        20.setCurrent.field = orderNumber
        20.setCurrent.wrap = | + {$plugin.tx_cart.orderNumber.offset}
        20.prioriCalc = intval

        30 = TEXT
        30.value = {$plugin.tx_cart.orderNumber.suffix}
    }

    invoiceNumber = COA
    invoiceNumber {
        10 = TEXT
        10.value = {$plugin.tx_cart.invoiceNumber.prefix}

        20 = TEXT
        20.current = 1
        20.setCurrent.field = invoiceNumber
        20.setCurrent.wrap = | + {$plugin.tx_cart.invoiceNumber.offset}
        20.prioriCalc = intval

        30 = TEXT
        30.value = {$plugin.tx_cart.invoiceNumber.suffix}
    }

    deliveryNumber = COA
    deliveryNumber {
        10 = TEXT
        10.value = {$plugin.tx_cart.deliveryNumber.prefix}

        20 = TEXT
        20.current = 1
        20.setCurrent.field = deliveryNumber
        20.setCurrent.wrap = | + {$plugin.tx_cart.deliveryNumber.offset}
        20.prioriCalc = intval

        30 = TEXT
        30.value = {$plugin.tx_cart.deliveryNumber.suffix}
    }
}

module.tx_cart {
    invoiceNumber < plugin.tx_cart.invoiceNumber
    deliveryNumber < plugin.tx_cart.deliveryNumber
}

# use this lib to add custom information or content elements to your email template
lib.cartMailHeader = COA
lib.cartMailHeader {
}

# use this lib to add custom information or content elements to your email template
lib.cartMailFooter = COA
lib.cartMailFooter {
}

lib.cartProduct = COA
lib.cartProduct.showForm = USER
lib.cartProduct.showForm {
    userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
    vendorName = Extcode
    extensionName = Cart
    pluginName = ProductPartial

    controller = Product
    action = showForm

    settings =< plugin.tx_cart.settings
    persistence =< plugin.tx_cart.persistence
    view =< plugin.tx_cart.view
    update =< plugin.tx_cart.update
}